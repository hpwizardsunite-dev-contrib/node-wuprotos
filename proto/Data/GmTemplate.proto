syntax = "proto3";
package WUProtos.Data;

import "WUProtos/Enums/MasterNoteGesture.proto";
import "WUProtos/Data/Collection/CollectionFamily.proto";
import "WUProtos/Data/StorePack.proto";
import "WUProtos/Data/QualityLevel.proto";
import "WUProtos/Data/ProfileConfig.proto";
import "WUProtos/Data/Challenge/ChallengeBonus.proto";
import "WUProtos/Data/HookQuestTask.proto";
import "WUProtos/Data/Requirements.proto";
import "WUProtos/Data/Loot/LootReward.proto";
import "WUProtos/Data/Conditions.proto";

message GmTemplate {
	oneof MessageType {
		.WUProtos.Data.Collection.CollectionFamily collection_family = 1;
		CollectionItem collection_item = 2;
		Encounter encounter = 3;
		EncounterObstacle encounter_obstacle = 4;
		Spell spell = 5;
		VaultItem vault_item = 6;
		GameConfig game_config = 7;
		PlayerLevel player_level = 8;
		.WUProtos.Data.StorePack store_pack = 9;
		WalkboxTemplate walkbox_template = 10;
		FeatureFlag feature_flag = 11;
		Portkey portkey = 12;
		Buff buff = 13;
		FortressTemplate fortress_template = 14;
		ChamberTemplate chamber_template = 15;
		.WUProtos.Data.QualityLevel quality_level = 16;
		ProtegoPattern protego_pattern = 17;
		CollectionPage collection_page = 18;
		TeamControl team_control = 19;
		StoreConfig store_config = 20;
		StoreSubcategory store_subcategory = 21;
		Haptic haptic = 22;
		EncounterType encounter_type = 23;
		ChallengeSpawnLogic challenge_spawn_logic = 24;
		Profession profession = 25;
		BonusCategory bonus_category = 26;
		VaultCategory vault_category = 27;
		.WUProtos.Data.ProfileConfig profile_config = 28;
		CollectionFamilyRankTable collection_family_rank_table = 29;
		MapIngredient map_ingredient = 30;
		MapAbility map_ability = 31;
		Recipe recipe = 32;
		.WUProtos.Data.Challenge.ChallengeBonus challenge_bonus = 33;
		Storyboard storyboard = 34;
		MasterNote master_note = 35;
		Cauldron cauldron = 36;
		Rpgstat rpgstat = 37;
		RpgstatsBlock rpgstats_block = 38;
		SelfieAvatarAsset selfie_avatar_asset = 39;
		OutpostTemplate outpost_template = 40;
		DailyRewardMonthlySchedule daily_reward_monthly_schedule = 41;
		Quest quest = 42;
		DeepLink deep_link = 43;
		Event event = 44;
		GreenhouseTemplate greenhouse_template = 45;
		Version version = 46;
	}

	message Quest {
		string id = 1;
		QuestType type = 2;
		repeated QuestTask tasks = 3;
		.WUProtos.Data.Loot.LootReward.LootCollection rewards = 4;
		int32 version = 5;
		int32 chain_position = 6;
		int32 chain_total = 7;
		repeated .WUProtos.Data.Requirements start_requirements = 8;

		enum ENCOUNTER_DIFFICULTY {
			UNSET = 0;
			LOW = 1;
			MEDIUM = 2;
			HIGH = 3;
			SEVERE = 4;
			EMERGENCY = 5;
		}

		enum QuestType {
			QUEST_TYPE_UNKNOWN = 0;
			QUEST_TYPE_NONREPEATABLE = 1;
			QUEST_TYPE_REPEATABLE = 2;
			QUEST_TYPE_DAILY = 3;
			QUEST_TYPE_EVENT = 4;
			QUEST_TYPE_ACHIEVEMENT = 5;
			QUEST_TYPE_EVENT_CHAIN = 6;
		}

		message QuestTask {
			oneof Type {
				RequirementsQuestTask req_task = 1;
				.WUProtos.Data.HookQuestTask hook_task = 2;
			}

			message RequirementsQuestTask {
				.WUProtos.Data.Requirements reqs = 1;
			}
		}
	}

	message VaultItem {
		string id = 1;

		oneof VaultItemType {
			CurrencyVaultItem currency_item = 2;
			StaminaVaultItem stamina_item = 3;
			DarkDetectorVaultItem detector_item = 4;
			ContainerVaultItem container_item = 5;
			RunestoneVaultItem runestone_item = 6;
			PotionVaultItem potion_item = 7;
			PotionIngredientVaultItem potion_ingredient = 8;
			EnergyVaultItem energy_item = 10;
			CauldronTimeItem cauldron_time_item = 11;
			PotTimeItem pot_time_item = 12;
		}

		int64 cap = 9;
		int32 relative_value = 100;
		string vault_category_gmt_id = 101;

		message RunestoneVaultItem {
			int32 quality = 1;
			bool is_boss = 2;
			string collection_family_gmt_id = 3;
		}

		enum PotionStateEnum {
			usable = 0;
			map_unusable = 1;
			potion_active = 2;
			stronger_active = 3;
			hpalready_full = 4;
			focus_already_full = 5;
		}

		message CauldronTimeItem {
			int64 availability_time = 1;
		}

		message PotionIngredientVaultItem {
			.WUProtos.Data.Loot.LootReward.LootCollection cost = 1;
		}

		message PotionVaultItem {
			repeated PotionConsumableScenario consumable_scenario = 3;
			repeated string applied_buff_gmt_id = 4;

			enum PotionConsumableScenario {
				UNKNOWN_CONSUMABLE_SCENARIO = 0;
				OVERWORLD = 1;
				ENCOUNTER = 2;
				SWISH_ENCOUNTER = 3;
				COMBAT_ENCOUNTER = 4;
				WC_ENCOUNTER = 5;
			}
		}

		message ContainerVaultItem {
			.WUProtos.Data.Loot.LootReward.LootCollection contents = 1;
			bool auto_consume = 2;
		}

		message CurrencyVaultItem {
		}

		message DarkDetectorVaultItem {
			int64 duration = 1;
		}

		message EnergyVaultItem {
			float impact = 1;
			int32 spell_effect = 2;
		}

		message StaminaVaultItem {
			float impact = 1;
			int32 spell_effect = 2;
		}

		message PotTimeItem {
			int64 availability_time = 1;
		}
	}

	message GameConfig {
		string id = 1;
		float pickup_range = 2;
		int32 map_update_rate = 3;
		int32 map_event_update_rate = 4;
		int32 map_puzzle_update_rate = 5;
		float try_again_bonus_per_failure = 6;
		float ar_mode_range = 7;
		int32 ar_mode_max_encounters = 8;
		int32 event_cool_down_duration = 9;
		int32 combat_stun_time = 10;
		int32 professions_min_level = 11;
		float accuracy_min_bonus = 12;
		float accuracy_max_bonus = 13;
		float encounter_min_base_win_rate = 14;
		float encounter_max_base_win_rate = 15;
		int32 player_level_cap = 16;
		float level_bonus_weight = 17;
		float gameplay_bonus_weight = 18;
		float gameplay_bonus_min = 19;
		float gameplay_bonus_max = 20;
		float professions_rps_non_match_impact = 21;
		float professions_rps_match_impact = 22;
		int64 pub_menu_refresh_interval_seconds = 23;
		FlooNetworkConfig floo_network_config = 24;
		TempFlooNetworkConfig temp_floo_network_config = 25;
		float map_unsafe_move_speed_mps = 26;
		int32 portkey_num_wrackspurts_to_collect = 27;
		int32 portkey_num_wrackspurts_in_env = 28;
		map<string, int64> player_stats_base = 30;
		map<string, string> player_profession_affinity_strength = 31;
		map<string, string> enemy_affinity_profession_strength = 32;
		int32 cauldrons_num_queue_slots = 33;
		repeated float swish_game_accuracy_tiers = 34;
		float cauldrons_instant_finish_cost_per_second = 35;
		string cauldrons_instant_finish_currency_id = 36;
		map<int32, uint32> rune_ratings = 37;
		string tutorial_encounter_id = 38;
		string tutorial_encounter_feature_flag_id = 39;
		BonusConfig bonus_config = 40;
		int32 max_walkbox_capacity = 41;
		string challenge_collection_family_id = 42;
		repeated string daily_quest_gmt_ids = 43;
		string cap_player_level_gmt_id = 44;
		int64 greenhouse_cool_down_ms = 45;
		map<int32, int32> player_level_override = 46;
		int64 inn_cool_down_ms = 47;
		int64 inn_menu_staleness_threshold_ms = 48;
		string daily_reward_schedule_gmt_id = 49;
		int64 wc_encounter_first_interact_timeout_ms = 50;
		int64 wc_encounter_interact_timeout_ms = 51;

		message FlooNetworkConfig {
			repeated ElectoralVotesPerFlooPoints electoral_votes_per_floo_points = 1;
			int32 points_per_decay_cycle = 2;
			int64 decay_cycle_length_ms = 3;

			message ElectoralVotesPerFlooPoints {
				int64 min_floo_points = 1;
				int64 electoral_votes = 2;
			}
		}

		enum ChallengeSoundContext {
			THIRTY_SECONDS = 0;
			PLAYER_WINS_BATTLE = 1;
			PLAYER_LOSES_BATTLE = 2;
			START_CHALLENGE = 3;
			PLAYER_WINS_CHALLENGE = 4;
			PLAYER_LOSES_CHALLENGE = 5;
			ELITE_MOB_SPAWNS = 6;
		}

		message BonusConfig {
			float tier_threshold = 1;
			.WUProtos.Data.Loot.LootReward.LootCollection bonus = 2;
		}

		message TempFlooNetworkConfig {
			int32 points_per_button_press = 1;
			int64 button_press_cooldown_ms = 2;
			map<string, int64> stamina_requirements = 3;
		}
	}

	message GreenhouseTemplate {
		string id = 1;
		SharedSocialGrowingSettings social_growing_settings = 2;

		message SharedSocialGrowingSettings {
			int32 number_of_normal_pots = 1;
			int32 number_of_rental_pots = 2;
			double normal_pot_growing_time_multiplier = 3;
			double rental_pot_growing_time_multiplier = 4;
			repeated HerbivicusMeterEntry herbivicus_meter = 5;
			int32 maximum_energy_allowed = 6;

			message HerbivicusMeterEntry {
				int32 spell_count = 1;
				int32 additional_number_of_spawning = 2;
			}
		}
	}

	message Haptic {
		repeated int32 ioswait_timings = 1;
		string id = 2;
		repeated int32 ioshaptic_types = 3;
		repeated int32 android_wait_timings = 4;
		repeated int32 android_amplitudes = 5;
		repeated int32 android_durations = 6;
	}

	message Spell {
		//repeated string charge_up_effect = 1;
		string id = 1;
		map<string, string> timelines = 2;
		map<string, string> critical_hits = 3;
	}

	message FortressTemplate {
		string id = 1;
		repeated string chamber_gmt_ids = 2;
	}

	message MasterNote {
		string id = 1;
		repeated .WUProtos.Enums.MasterNoteGesture gestures = 2;
		MasterNoteEffect effect = 3;

		message MasterNoteEffect {
			string id = 1;
			MasterNoteEffectType effect_type = 2;
			int64 power = 3;

			enum MasterNoteEffectType {
				UNSET = 0;
				BREW_SPEED_STATIC = 1;
				BREW_SPEED_PERCENT = 2;
				BREW_YIELD_STATIC = 3;
			}
		}
	}

	message OutpostTemplate {
		string id = 1;
	}

	message Portkey {
		string id = 1;
		string portkey_encounter_id = 2;
	}

	message Rpgstat {
		string id = 1;
		RangeInt64 stat_bounds = 2;

		enum IconDisplayType {
			BOTH = 0;
			PLAYER_VIEW = 1;
			ENEMY_VIEW = 2;
			NEITHER = 3;
		}

		message RangeInt64 {
			int64 min = 1;
			int64 max = 2;
		}

		message RangeUint32 {
			uint32 min = 1;
			uint32 max = 2;
		}
	}

	message RpgstatsBlock {
		string id = 1;
	}

	message SelfieAvatarAsset {
		string id = 1;
		.WUProtos.Data.Requirements unlock_conditions = 2;
	}

	message TeamControl {
		string id = 1;
		string team_name = 2;
	}

	message VaultCategory {
		string id = 1;
		CategoryCapacityType capacity_type = 2;

		enum CategoryCapacityType {
			CAGETORY_CAPACITY_TYPE_UNSET = 0;
			DEFAULT_CAPACITY_TYPE = 1;
			INFINITE = 2;
		}
	}

	message Recipe {
		string id = 1;
		.WUProtos.Data.Loot.LootReward.LootCollection recipe = 2;
		.WUProtos.Data.Loot.LootReward.LootCollection rewards = 3;
		int64 time_to_craft = 4;
		repeated string master_note_gmt_id = 5;
		bool disabled = 6;
		repeated .WUProtos.Data.Requirements unlock_conditions = 7;
	}

	message Version {
		string id = 1;
		string data_version = 2;
		string data_branch = 3;
	}

	message BonusCategory {
		string id = 1;
	}

	message Cauldron {
		string id = 1;
		CauldronType type = 2;
		float discount = 3;

		enum CauldronType {
			CAULDRON_UNKNOWN = 0;
			CAULDRON_NORMAL = 1;
			CAULDRON_RENTAL = 2;
		}
	}

	message ChamberTemplate {
		string id = 1;
		.WUProtos.Data.Requirements unlock_requirements = 2;
		.WUProtos.Data.Requirements visibility_requirements = 3;
		uint32 min_runestone_level = 4;
		uint32 max_runestone_level = 5;
		uint32 player_cap = 6;
		int64 duration_ms = 7;
		int64 knockout_time_ms = 10;
		map <int32, PlayerCountMultipliers> player_count_multipliers = 11;
		uint32 base_chamber_rating = 12;
	}

	message DeepLink {
		string id = 1;
		string category = 2;
		.WUProtos.Data.Requirements requirements = 3;
		string item = 4;
	}

	message ChallengeSpawnLogic {
		string id = 1;
	}

	message CollectionItem {
		string id = 1;
		string family_id = 2;
		int32 shard_count = 3;
		int32 rarity = 4;
		.WUProtos.Data.Loot.LootReward.LootCollection one_time_rewards = 5;
		string page_id = 6;
		.WUProtos.Data.Requirements unlock_requirements = 7;
		repeated int32 shard_counts = 8;
		bool sticker_disabled = 10;
	}

	message CollectionFamilyRankTable {
		string id = 1;
		repeated CollectionFamilyRank rank_data = 2;

		message CollectionFamilyRank {
			int64 total_xp_req = 1;
			int32 chest_count = 2;
			string small_loottable_id = 3;
			string level_up_loottable_id = 4;
		}
	}

	message CollectionPage {
		string id = 1;
		string family_id = 2;
		repeated string items = 3;
		repeated .WUProtos.Data.Loot.LootReward.LootCollection completion_rewards = 4;
		.WUProtos.Data.Requirements unlock_requirements = 5;
	}

	message Encounter {
		string id = 1;
		string collection_item_reward_gmt_id = 2;
		repeated EncounterStage stages = 3;
		int32 collection_item_reward_shards = 4;
		string collection_family_gmt_id = 5;
		string affinity_profession_id = 6;

		message EncounterStage {
			oneof Type {
				EncounterStageSwish swish = 1;
				EncounterStageCombat combat = 2;
				EncounterStagePortkey portkey = 3;
				EncounterStagePicture picture = 4;
			}

			string spell_gmt_id = 5;

			message EncounterStageSwish {
				float base_win_rate = 1;
			}

			message EncounterStageCombat {
				repeated CombatState state_graph_nodes = 1;
				CombatEnemyStats enemy_stats = 2;
				repeated string enemy_ranks = 3;

				message CombatState {
					repeated CombatMoveType possible_moves = 1;
				}

				message CombatMoveType {
					oneof CombatMove {
						CombatPlayerAttack player_attack = 1;
						CombatPlayerDefend player_defend = 2;
						CombatPlayerAutoAdvance player_auto_advance = 3;
					}

					message CombatPlayerDefend {
					}

					message CombatPlayerAutoAdvance {
					}

					message CombatPlayerAttack {
					}
				}

				message CombatEnemyStats {
					map<string, int64> stat = 2;
					map<string, CombatGrowth> stat_growth = 3;

					message CombatGrowth {
						GrowthType grow_type = 1;
						float growth_adjustment = 2;

						enum GrowthType {
							GROWTH_TYPE_UNSET = 0;
							LINEAR = 1;
							LOGARITHMIC = 2;
							EXPONENTIAL = 3;
						}
					}
				}
			}

			message EncounterStagePortkey {
			}

			message EncounterStagePicture {
			}
		}
	}

	message EncounterObstacle {
		string id = 1;
	}

	message EncounterType {
		string id = 1;
	}

	message DailyRewardMonthlySchedule {
		string id = 1;
		uint32 number_of_days = 2;
		.WUProtos.Data.Loot.LootReward.LootCollection default_reward = 3;
		map<int32, DailyReward> daily_rewards = 4;

		message DailyReward {
			.WUProtos.Data.Loot.LootReward.LootCollection reward = 1;
		}
	}

	message Buff {
		string id = 1;
		BuffDuration duration = 3;
		BuffExclusivityGroup exclusivity_group = 4;
		BuffType buff_type = 5;
		map<string, int64> modifiers = 6;
		repeated ConditionalModifiers conditional_modifiers = 7;

		enum BuffType {
			NONE = 0;
			BUFF = 1;
			DEBUFF = 2;
		}

		message BuffExclusivityGroup {
			string exclusivity_group = 1;
			int32 exclusivity_priority = 2;
		}
	}

	message BuffDuration {
		oneof Type {
			TimeBuffDuration time = 1;
			ChargesBuffDuration charges = 2;
			ProfessionBuffDuration profession = 3;
			PermanentBuffDuration permanent = 4;
			InstantBuffDuration instant = 5;
			ChallengeBuffDuration challenge = 6;
		}

		message ChargesBuffDuration {
			int32 num_charges = 1;
			bool is_override = 2;
		}

		message InstantBuffDuration {
		}

		message PermanentBuffDuration {
		}

		message TimeBuffDuration {
			int64 time_ms = 1;
			bool is_override = 2;
		}

		message ChallengeBuffDuration {
		}

		message ProfessionBuffDuration {
		}
	}

	message Event {
		string id = 1;
		.WUProtos.Data.Requirements activation_reqs = 2;
		.WUProtos.Data.Requirements running_reqs = 3;
	}

	message PlayerCountMultipliers {
		repeated float multipliers = 1;
	}

	message PlayerLevel {
		string id = 1;
		int32 required_xp = 2;
	}

	message Profession {
		string id = 1;
		repeated .WUProtos.Data.Requirements requirements = 3;
		bool show_in_ui = 4;
		map<string, ProfessionRank> profesion_ranks_map = 5;
		repeated ProfessionTier profession_tiers = 6;

		message ProfessionTier {
			uint32 rank_points_upper_bound = 1;
			bool is_major_upgrade = 2;
		}

		message ProfessionRank {
			uint32 potential_rank_points = 1;
			repeated .WUProtos.Data.Requirements requirements = 2;
			map<string, ProfessionNode> profession_nodes_map = 3;
			bool show_in_ui = 4;
			string id = 5;

			message ProfessionNode {
				string id = 1;
				repeated .WUProtos.Data.Requirements edges = 2;
				repeated ProfessionNodeLevel levels = 3;
				uint32 row_pos = 4;
				uint32 col_pos = 5;

				message ProfessionNodeLevel {
					string buff_gmt_id = 1;
					.WUProtos.Data.Requirements prerequisite = 2;
					.WUProtos.Data.Loot.LootReward.LootCollection cost = 3;
					repeated string map_abilities = 4;
					uint32 rank_points = 5;

					enum Purpose {
						none = 0;
						buff = 1;
						learn_new_map_ability = 2;
						upgrade_map_ability = 3;
					}
				}
			}
		}
	}

	message Storyboard {
		string id = 1;
		.WUProtos.Data.Requirements start_reqs = 2;
		string step_flag_gmt_id = 3;
		string complete_flag_gmt_id = 4;
		repeated StoryboardStep storyboard_steps = 5;
		StoryboardResetMode reset_mode = 6;
		.WUProtos.Data.Requirements reset_reqs = 7;

		enum StoryboardResetMode {
			STORYBOARD_RESET_UNKNOWN = 0;
			STORYBOARD_RESET_NOT_ALLOWED = 1;
			STORYBOARD_RESET_WHEN_INCOMPLETE = 2;
			STORYBOARD_RESET_WHEN_COMPLETE = 3;
		}

		message StoryboardStep {
			.WUProtos.Data.Loot.LootReward.LootCollection rewards = 1;
		}
	}

	message ConditionalModifiers {
		.WUProtos.Data.Conditions conditions = 1;
		map<string, int64> modifiers = 2;
	}

	message FeatureFlag {
		oneof DefaultValue {
			string id = 1;
			string feature_id = 2;
			bool bval = 3;
			int64 lval = 4;
			string sval = 5;
			float fval = 6;
		}
	}

	message WalkboxTemplate {
		string id = 1;
		float required_distance_km = 2;
	}

	message MapIngredient {
		string id = 1;
		.WUProtos.Data.Loot.LootReward.LootCollection loot = 2;
		.WUProtos.Data.Loot.LootReward.LootCollection cost = 3;
	}

	message MapAbility {
		string id = 1;
		MapAbilityTargetType target_type = 2;
		string base_buff_gmt_id = 3;
		float radius = 4;
		uint32 cooldown_ms = 5;
		int32 focus_cost = 6;
		repeated MapAbilityLevel map_ability_levels = 7;

		enum MapAbilityTargetType {
			TARGET_NONE = 0;
			TARGET_CHOOSE_ONE = 1;
			TARGET_CHOOSE_FRIEND = 2;
			TARGET_CHOOSE_ENEMY = 3;
			TARGET_SELF = 4;
			TARGET_RANGE = 5;
			TARGET_ENEMIES_IN_RANGE = 6;
			TARGET_ENTIRE_FRIENDS = 7;
			TARGET_RANDOM_ONE = 8;
			TARGET_RANDOM_FRIEND = 9;
			TARGET_RANDOM_ENEMY = 10;
			TARGET_ENTIRE_ENEMIES = 11;
			TARGET_CHOOSE_FRIEND_NOT_SELF = 12;
		}

		message MapAbilityLevel {
			MapAbilityTargetType target_type = 1;
			float radius = 2;
			uint32 cooldown_ms = 3;
			int32 focus_cost = 4;
			string buff_gmt_id = 5;
		}
	}

	message StoreSubcategory {
		string id = 1;
	}

	message StoreConfig {
		string id = 1;
	}

	message ProtegoPattern {
		string id = 1;
	}
}
